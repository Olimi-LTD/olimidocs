{
  "openapi": "3.0.1",
  "info": {
    "title": "Contact Management API",
    "description": "API for managing contact lists and contacts within those lists",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://api.olimi.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/contact-lists": {
      "get": {
        "description": "Retrieves all contact lists with their UUIDs",
        "responses": {
          "200": {
            "description": "A list of contact lists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contact-lists/{contactListUUID}/contacts": {
      "post": {
        "description": "Adds a new contact to the specified contact list",
        "parameters": [
          {
            "name": "contactListUUID",
            "in": "path",
            "description": "UUID of the contact list to add the contact to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contact to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactUUID}": {
      "delete": {
        "description": "Deletes a contact based on the UUID supplied",
        "parameters": [
          {
            "name": "contactUUID",
            "in": "path",
            "description": "UUID of the contact to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted successfully",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactListUUID}/clear": {
      "delete": {
        "description": "Clears all contacts in the specified roster (contact list).",
        "parameters": [
          {
            "name": "contactListUUID",
            "in": "path",
            "description": "ID of the contact list (roster) to clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All contacts in the contact list were cleared successfully.",
            "content": {}
          },
          "400": {
            "description": "Unexpected error occurred during the clear operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactListUUID}": {
      "get": {
        "description": "Retrieves all contacts in the specified contact list (roster).",
        "parameters": [
          {
            "name": "contactListUUID",
            "in": "path",
            "description": "ID of the contact list (roster) to fetch the contacts from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts in the specified contact list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while fetching contacts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/import": {
      "post": {
        "description": "Imports contacts in bulk using a file (CSV).",
        "requestBody": {
          "description": "CSV file containing contacts to be imported.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "CSV file containing the contacts."
                  },
                  "contactListUUID": {
                    "type": "string",
                    "description": "ID of the contact list (roster) to import the contacts into."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contacts imported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imported_count": {
                      "type": "integer",
                      "description": "Number of contacts imported."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred during the import operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "description": "Retrieves all campaigns.",
        "responses": {
          "200": {
            "description": "A list of all campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while fetching campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/create": {
      "post": {
        "description": "Creates a new campaign.",
        "requestBody": {
          "description": "Details of the new campaign to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the campaign"
                  },
                  "roster_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the roster associated with the campaign"
                  },
                  "agent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the agent responsible for the campaign"
                  },
                  "working_day_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID identifying the working day schedule for the campaign"
                  },
                  "max_daily_minutes": {
                    "type": "integer",
                    "description": "Maximum number of minutes per day for the campaign"
                  },
                  "max_retries": {
                    "type": "integer",
                    "description": "Maximum number of retries allowed in the campaign"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the campaign"
                  },
                  "working_start_time": {
                    "type": "string",
                    "format": "time",
                    "description": "Start time of working hours for the campaign"
                  },
                  "working_end_time": {
                    "type": "string",
                    "format": "time",
                    "description": "End time of working hours for the campaign"
                  },
                  "is_active": {
                    "type": "boolean",
                    "description": "Status to activate or deactivate the campaign"
                  }
                },
                "required": [
                  "name",
                  "roster_id",
                  "agent_id",
                  "working_day_id",
                  "max_daily_minutes",
                  "max_retries",
                  "working_start_time",
                  "working_end_time",
                  "is_active"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}": {
      "get": {
        "description": "Retrieves a specific campaign by its ID.",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of the campaign to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while retrieving the campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/delete": {
      "delete": {
        "description": "Deletes the specified campaign.",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of the campaign to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Campaign deleted successfully.",
            "content": {}
          },
          "400": {
            "description": "Unexpected error occurred while deleting the campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/update": {
      "post": {
        "description": "Updates the details of a specific campaign.",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of the campaign to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated campaign details.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the campaign."
                  },
                  "working_day_id": {
                    "type": "string",
                    "description": "ID representing the working day schedule for the campaign."
                  },
                  "max_daily_minutes": {
                    "type": "integer",
                    "description": "Maximum minutes the campaign can run daily."
                  },
                  "max_retries": {
                    "type": "integer",
                    "description": "Maximum retries allowed per contact."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the campaign."
                  },
                  "working_start_time": {
                    "type": "string",
                    "format": "time",
                    "description": "Start time for the campaign in the format HH:MM:SS."
                  },
                  "working_end_time": {
                    "type": "string",
                    "format": "time",
                    "description": "End time for the campaign in the format HH:MM:SS."
                  },
                  "is_active": {
                    "type": "boolean",
                    "description": "Indicates whether the campaign is active."
                  }
                },
                "required": [
                  "name",
                  "working_day_id",
                  "max_daily_minutes",
                  "max_retries",
                  "working_start_time",
                  "working_end_time",
                  "is_active"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Campaign details updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while updating the campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/company/update": {
      "post": {
        "description": "Updates the details of a specific company.",
        "requestBody": {
          "description": "Details of the company to be updated.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data[name]": {
                    "type": "string",
                    "description": "Name of the company"
                  },
                  "data[working_day_id]": {
                    "type": "string",
                    "description": "ID representing the working day schedule for the company"
                  },
                  "data[country_id]": {
                    "type": "string",
                    "description": "ID of the country where the company is located"
                  },
                  "data[working_start_time]": {
                    "type": "string",
                    "format": "time",
                    "description": "Start time for the company's operations in the format HH:MM:SS"
                  },
                  "data[working_end_time]": {
                    "type": "string",
                    "format": "time",
                    "description": "End time for the company's operations in the format HH:MM:SS"
                  },
                  "data[newsletter]": {
                    "type": "boolean",
                    "description": "Indicates whether the company subscribes to newsletters"
                  },
                  "server_id": {
                    "type": "string",
                    "description": "ID of the server associated with the company"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image associated with the company"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company details updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/countries": {
      "get": {
        "description": "Retrieves a list of all countries.",
        "responses": {
          "200": {
            "description": "A list of all countries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the country"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the country"
                      },
                      "code": {
                        "type": "string",
                        "description": "The international dialing code of the country"
                      },
                      "currency": {
                        "type": "string",
                        "description": "The official currency used in the country"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "code",
                      "currency"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while fetching countries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/languages": {
      "get": {
        "description": "Retrieves a list of all supported languages.",
        "responses": {
          "200": {
            "description": "A list of supported languages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the language"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the language"
                      },
                      "code": {
                        "type": "string",
                        "description": "The ISO language code"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "code"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while fetching languages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customer-lists": {
      "get": {
        "description": "Retrieves all customer lists with their UUIDs",
        "responses": {
          "200": {
            "description": "A list of customer lists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customer-lists/{customerListUUID}/customers": {
      "post": {
        "description": "Adds a new customer to the specified customer list",
        "parameters": [
          {
            "name": "customerListUUID",
            "in": "path",
            "description": "UUID of the customer list to add the customer to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The customer to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerUUID}": {
      "delete": {
        "description": "Deletes a customer based on the UUID supplied",
        "parameters": [
          {
            "name": "customerUUID",
            "in": "path",
            "description": "UUID of the customer to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted successfully",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerListUUID}/clear": {
      "delete": {
        "description": "Clears all customers in the specified list.",
        "parameters": [
          {
            "name": "customerListUUID",
            "in": "path",
            "description": "ID of the customer list to clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All customers in the customer list were cleared successfully.",
            "content": {}
          },
          "400": {
            "description": "Unexpected error occurred during the clear operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerListUUID}": {
      "get": {
        "description": "Retrieves all customers in the specified customer list.",
        "parameters": [
          {
            "name": "customerListUUID",
            "in": "path",
            "description": "ID of the customer list to fetch the customers from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customers in the specified customer list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred while fetching customers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customers/import": {
      "post": {
        "description": "Imports customers in bulk using a file (CSV).",
        "requestBody": {
          "description": "CSV file containing customers to be imported.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "CSV file containing the customers."
                  },
                  "customerListUUID": {
                    "type": "string",
                    "description": "ID of the customer list to import the customers into."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customers imported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imported_count": {
                      "type": "integer",
                      "description": "Number of customers imported."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error occurred during the import operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/calls": {
      "get": {
        "description": "Fetches a list of calls based on search parameters like name, campaign ID, and phone number.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name associated with the call",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaign",
            "in": "query",
            "description": "Campaign ID associated with the call",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number associated with the call",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of calls that match the query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Call"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/calls/{sid}/upload-attachment": {
      "post": {
        "description": "Uploads an attachment for a call identified by its SID.",
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "description": "Unique identifier (SID) of the call",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to be uploaded along with the duration of the call",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to be uploaded"
                  },
                  "duration_in_sec": {
                    "type": "integer",
                    "description": "Duration of the call in seconds"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File uploaded successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to upload the file or invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Callback": {
        "type": "object",
        "required": [
          "call_sid",
          "call_summary",
          "call_status"
        ],
        "properties": {
          "call_sid": {
            "type": "string",
            "description": "Unique identifier for the call session (Call SID)"
          },
          "call_summary": {
            "type": "object",
            "description": "Summary of the call",
            "properties": {
              "transcript": {
                "type": "array",
                "description": "Conversation transcript with user and assistant roles",
                "items": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Role of the participant in the conversation (e.g., 'user' or 'assistant')"
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the conversation by the respective role"
                    }
                  }
                }
              },
              "characters": {
                "type": "integer",
                "description": "Total number of characters spoken in the call"
              },
              "input_tokens": {
                "type": "integer",
                "description": "Number of input tokens used in the call"
              },
              "output_tokens": {
                "type": "integer",
                "description": "Number of output tokens used in the call"
              },
              "duration": {
                "type": "integer",
                "description": "Total duration of the call in seconds"
              }
            }
          },
          "call_status": {
            "type": "object",
            "description": "Status of the call",
            "properties": {
              "status": {
                "type": "string",
                "description": "Final status of the call (e.g., 'completed', 'failed')"
              }
            }
          }
        }
      },
      "Call": {
        "type": "object",
        "required": [
          "sid",
          "name",
          "phone",
          "campaign",
          "status"
        ],
        "properties": {
          "sid": {
            "type": "string",
            "description": "Unique identifier (SID) of the call"
          },
          "name": {
            "type": "string",
            "description": "Name associated with the call"
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with the call"
          },
          "campaign": {
            "type": "string",
            "description": "Campaign ID associated with the call"
          },
          "status": {
            "type": "string",
            "description": "Status of the call (e.g., 'completed', 'in-progress')"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the call in seconds",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "description": "Array of attachments related to the call",
            "items": {
              "type": "object",
              "properties": {
                "file_url": {
                  "type": "string",
                  "description": "URL to the uploaded attachment file"
                },
                "duration_in_sec": {
                  "type": "integer",
                  "description": "Duration of the attachment in seconds"
                }
              }
            },
            "nullable": true
          }
        }
      },
      "NewCustomer": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "email",
          "phoneNumber"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the customer"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the customer"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the customer"
          },
          "address": {
            "type": "object",
            "description": "Address of the customer",
            "properties": {
              "street": {
                "type": "string",
                "description": "Street address of the customer"
              },
              "city": {
                "type": "string",
                "description": "City of the customer"
              },
              "state": {
                "type": "string",
                "description": "State of the customer"
              },
              "zipCode": {
                "type": "string",
                "description": "Zip code of the customer"
              }
            }
          }
        }
      },
      "CustomerList": {
        "type": "object",
        "required": [
          "uuid",
          "name",
          "createdAt"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the customer list"
          },
          "name": {
            "type": "string",
            "description": "Name of the customer list"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the customer list"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the customer list was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the customer list was last updated"
          },
          "customers": {
            "type": "array",
            "description": "Array of customers in the list",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "Language": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for a language"
            },
            "name": {
              "type": "string",
              "description": "The name of the language"
            },
            "code": {
              "type": "string",
              "description": "The ISO language code"
            }
          },
          "required": [
            "id",
            "name",
            "code"
          ]
        }
      },
      "GeneralAudio": {
        "type": "object",
        "properties": {
          "voice_id": {
            "type": "string",
            "description": "The identifier for the voice model used to generate audio."
          },
          "sentence": {
            "type": "string",
            "description": "The sentence to be converted into speech."
          }
        },
        "required": [
          "voice_id",
          "sentence"
        ]
      },
      "Extension": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name associated with the extension"
          },
          "trunk_name": {
            "type": "string",
            "description": "The trunk name associated with the extension"
          },
          "extension": {
            "type": "string",
            "description": "The extension number"
          },
          "type": {
            "type": "string",
            "description": "The type of the extension, e.g., SIP"
          }
        },
        "required": [
          "name",
          "trunk_name",
          "extension",
          "type"
        ]
      },
      "ContactList": {
        "type": "object",
        "required": [
          "uuid",
          "name"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the contact list"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact list"
          }
        }
      },
      "Customer": {
        "type": "object",
        "required": [
          "uuid",
          "firstName",
          "lastName",
          "email",
          "phoneNumber"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the customer"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the customer"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the customer"
          },
          "address": {
            "type": "object",
            "description": "Address of the customer",
            "properties": {
              "street": {
                "type": "string",
                "description": "Street address of the customer"
              },
              "city": {
                "type": "string",
                "description": "City of the customer"
              },
              "state": {
                "type": "string",
                "description": "State of the customer"
              },
              "zipCode": {
                "type": "string",
                "description": "Zip code of the customer"
              }
            }
          }
        }
      },
      "NewContact": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the contact"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the contact"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the contact"
          }
        }
      },
      "Campaign": {
        "type": "object",
        "required": [
          "name",
          "roster_id",
          "agent_id",
          "working_day_id",
          "max_daily_minutes",
          "max_retries",
          "description",
          "working_start_time",
          "working_end_time",
          "is_active"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the campaign"
          },
          "roster_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the roster associated with the campaign"
          },
          "agent_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the agent responsible for the campaign"
          },
          "working_day_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID identifying the working day schedule for the campaign"
          },
          "max_daily_minutes": {
            "type": "integer",
            "description": "Maximum number of minutes per day for the campaign"
          },
          "max_retries": {
            "type": "integer",
            "description": "Maximum number of retries allowed in the campaign"
          },
          "description": {
            "type": "string",
            "description": "Description of the campaign"
          },
          "working_start_time": {
            "type": "string",
            "format": "time",
            "description": "Start time of working hours for the campaign"
          },
          "working_end_time": {
            "type": "string",
            "format": "time",
            "description": "End time of working hours for the campaign"
          },
          "is_active": {
            "type": "boolean",
            "description": "Status to activate or deactivate the campaign"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier for a country"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the country"
                },
                "code": {
                  "type": "string",
                  "description": "The international dialing code for the country"
                },
                "currency": {
                  "type": "string",
                  "description": "The official currency used in the country"
                }
              },
              "required": [
                "id",
                "name",
                "code",
                "currency"
              ]
            }
          }
        },
        "required": [
          "countries"
        ]
      },
      "Company": {
        "type": "object",
        "properties": {
          "data[name]": {
            "type": "string",
            "description": "Name of the company"
          },
          "data[working_day_id]": {
            "type": "string",
            "description": "ID representing the working day schedule for the company"
          },
          "data[country_id]": {
            "type": "string",
            "description": "ID of the country where the company is located"
          },
          "data[working_start_time]": {
            "type": "string",
            "format": "time",
            "description": "Start time for the company's operations in the format HH:MM:SS"
          },
          "data[working_end_time]": {
            "type": "string",
            "format": "time",
            "description": "End time for the company's operations in the format HH:MM:SS"
          },
          "data[newsletter]": {
            "type": "boolean",
            "description": "Indicates whether the company subscribes to newsletters"
          },
          "server_id": {
            "type": "string",
            "description": "ID of the server associated with the company"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Image associated with the company"
          }
        },
        "required": [
          "data[name]",
          "data[working_day_id]",
          "data[country_id]",
          "data[working_start_time]",
          "data[working_end_time]",
          "server_id"
        ]
      },
      "Contact": {
        "type": "object",
        "required": [
          "uuid",
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the contact"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the contact"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the contact"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the contact"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}